name: Deploy to Snowflake with Rollback Logging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (update/rollback)'
        required: true
        default: 'update'
      rollbackCount:
        description: 'Number of changesets to rollback'
        required: false
        default: '1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Download and Extract Liquibase
        run: |
          mkdir -p liquibase
          cd liquibase
          wget -q https://github.com/liquibase/liquibase/releases/download/v4.25.0/liquibase-4.25.0.tar.gz
          tar -xzf liquibase-4.25.0.tar.gz

      - name: Create lib directory for drivers
        run: |
          cd liquibase
          mkdir -p lib

      - name: Download Snowflake JDBC Driver
        run: |
          cd liquibase
          wget -q https://repo1.maven.org/maven2/net/snowflake/snowflake-jdbc/3.14.5/snowflake-jdbc-3.14.5.jar
          mv snowflake-jdbc-3.14.5.jar lib/

      # Setup logging directory
      - name: Setup Logging Directory
        run: |
          mkdir -p logs
          echo "Deployment started at $(date)" > logs/deployment_history.log

      # Run Liquibase Update or Rollback based on workflow input
      - name: Run Liquibase Operation
        env:
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          ACTION="${{ github.event.inputs.action || 'update' }}"
          ROLLBACK_COUNT="${{ github.event.inputs.rollbackCount || '1' }}"
          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          LOG_FILE="logs/liquibase_${ACTION}_${TIMESTAMP}.log"
          
          cd liquibase
          
          if [ "$ACTION" == "update" ]; then
            echo "Performing update operation" | tee -a $LOG_FILE
            
            # Capture current state before update for tracking
            ./liquibase --search-path=/home/runner/work/LiquibaseDeployment/LiquibaseDeployment/dbscripts \
              --changelog-file=change2.sql \
              --username=${{ secrets.SNOWFLAKE_USER }} \
              --password=${{ secrets.SNOWFLAKE_PASSWORD }} \
              --classpath=lib/snowflake-jdbc-3.14.5.jar \
              --url='jdbc:snowflake://WXVXDID-ZN02370.snowflakecomputing.com/?db=${{ secrets.SNOWFLAKE_DATABASE }}&schema=${{ secrets.SNOWFLAKE_SCHEMA }}&warehouse=COMPUTE_WH' \
              --driver='net.snowflake.client.jdbc.SnowflakeDriver' \
              history | tee -a $LOG_FILE
            
            # Perform the update
            ./liquibase --search-path=/home/runner/work/LiquibaseDeployment/LiquibaseDeployment/dbscripts \
              update \
              --changelog-file=change2.sql \
              --username=${{ secrets.SNOWFLAKE_USER }} \
              --password=${{ secrets.SNOWFLAKE_PASSWORD }} \
              --classpath=lib/snowflake-jdbc-3.14.5.jar \
              --url='jdbc:snowflake://WXVXDID-ZN02370.snowflakecomputing.com/?db=${{ secrets.SNOWFLAKE_DATABASE }}&schema=${{ secrets.SNOWFLAKE_SCHEMA }}&warehouse=COMPUTE_WH' \
              --driver='net.snowflake.client.jdbc.SnowflakeDriver' | tee -a $LOG_FILE
              
          elif [ "$ACTION" == "rollback" ]; then
            echo "Performing rollback operation (count: $ROLLBACK_COUNT)" | tee -a $LOG_FILE
            
            # Capture current state before rollback for tracking
            ./liquibase --search-path=/home/runner/work/LiquibaseDeployment/LiquibaseDeployment/dbscripts \
              --changelog-file=change2.sql \
              --username=${{ secrets.SNOWFLAKE_USER }} \
              --password=${{ secrets.SNOWFLAKE_PASSWORD }} \
              --classpath=lib/snowflake-jdbc-3.14.5.jar \
              --url='jdbc:snowflake://WXVXDID-ZN02370.snowflakecomputing.com/?db=${{ secrets.SNOWFLAKE_DATABASE }}&schema=${{ secrets.SNOWFLAKE_SCHEMA }}&warehouse=COMPUTE_WH' \
              --driver='net.snowflake.client.jdbc.SnowflakeDriver' \
              history | tee -a $LOG_FILE
              
            # Output SQL that would be executed during rollback (for logging)
            ./liquibase --search-path=/home/runner/work/LiquibaseDeployment/LiquibaseDeployment/dbscripts \
              rollbackCount $ROLLBACK_COUNT \
              --changelog-file=change2.sql \
              --username=${{ secrets.SNOWFLAKE_USER }} \
              --password=${{ secrets.SNOWFLAKE_PASSWORD }} \
              --classpath=lib/snowflake-jdbc-3.14.5.jar \
              --url='jdbc:snowflake://WXVXDID-ZN02370.snowflakecomputing.com/?db=${{ secrets.SNOWFLAKE_DATABASE }}&schema=${{ secrets.SNOWFLAKE_SCHEMA }}&warehouse=COMPUTE_WH' \
              --driver='net.snowflake.client.jdbc.SnowflakeDriver' \
              --output-file=logs/rollback_sql_${TIMESTAMP}.sql
              
            # Perform the actual rollback
            ./liquibase --search-path=/home/runner/work/LiquibaseDeployment/LiquibaseDeployment/dbscripts \
              rollbackCount $ROLLBACK_COUNT \
              --changelog-file=change2.sql \
              --username=${{ secrets.SNOWFLAKE_USER }} \
              --password=${{ secrets.SNOWFLAKE_PASSWORD }} \
              --classpath=lib/snowflake-jdbc-3.14.5.jar \
              --url='jdbc:snowflake://WXVXDID-ZN02370.snowflakecomputing.com/?db=${{ secrets.SNOWFLAKE_DATABASE }}&schema=${{ secrets.SNOWFLAKE_SCHEMA }}&warehouse=COMPUTE_WH' \
              --driver='net.snowflake.client.jdbc.SnowflakeDriver' | tee -a $LOG_FILE
          fi
          
          # Update the deployment history log
          echo "Operation: $ACTION completed at $(date)" >> logs/deployment_history.log
          
      # Archive logs as artifacts - using latest version (v4)
      - name: Archive Logs
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-logs
          path: logs/
